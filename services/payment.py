import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from yookassa import Configuration, Payment
from config import config
from database import db
from keyboards import inline
import uuid

Configuration.account_id = config.YOOKASSA_SHOP_ID
Configuration.secret_key = config.YOOKASSA_SECRET_KEY

router = Router()

def create_payment(user_id: int, amount: float, description: str, payment_method: str) -> dict:
    if payment_method == "yookassa":
        payment = Payment.create({
            "amount": {
                "value": amount,
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": f"https://t.me/yarneiro_bot"
            },
            "capture": True,
            "description": description,
            "metadata": {
                "user_id": user_id
            }
        }, uuid.uuid4())
        
        return {
            "id": payment.id,
            "confirmation_url": payment.confirmation.confirmation_url
        }
    elif payment_method == "tgstars":
        # Implement TG Stars payment logic here
        # This is a placeholder and should be replaced with actual TG Stars API calls
        return {
            "id": f"tgstars_{uuid.uuid4()}",
            "confirmation_url": f"https://t.me/tgstars_bot?start=pay_{user_id}"
        }
    else:
        raise ValueError("Invalid payment method")

def check_payment(payment_id: str, payment_method: str) -> bool:
    if payment_method == "yookassa":
        try:
            payment = Payment.find_one(payment_id)
            return payment.status == "succeeded"
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ Yookassa: {e}")
            return False
    elif payment_method == "tgstars":
        # Implement TG Stars payment check logic here
        # This is a placeholder and should be replaced with actual TG Stars API calls
        return True  # Assuming payment is always successful for this example
    else:
        raise ValueError("Invalid payment method")

@router.callback_query(F.data.startswith("pay_"))
async def process_payment(callback: CallbackQuery, state: FSMContext):
    payment_method, subscription_type = callback.data.split("_")[1:]
    
    if subscription_type == "trial":
        amount = config.TRIAL_PRICE
        description = "–ü—Ä–æ–±–Ω–∞—è Premium –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –¥–Ω—è"
    else:
        data = await state.get_data()
        period = data.get('subscription_period')
        amount = get_subscription_price(period)
        description = f"Premium –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {get_period_name(period)}"
    
    payment = create_payment(callback.from_user.id, amount, description, payment_method)
    
    await state.update_data(payment_id=payment['id'], payment_method=payment_method)
    await callback.message.edit_text(
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã {description} –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n"
        f"{payment['confirmation_url']}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
        reply_markup=inline.get_check_payment_keyboard()
    )

@router.callback_query(F.data == "check_payment")
async def check_premium_payment(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    payment_id = data.get('payment_id')
    payment_method = data.get('payment_method')
    
    if not payment_id or not payment_method:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if check_payment(payment_id, payment_method):
        user = db.get_user(callback.from_user.id)
        user['premium'] = True
        user['subscription_until'] = (datetime.now() + config.TRIAL_PERIOD).isoformat()
        db.update_user(callback.from_user.id, user)
        await callback.message.edit_text(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ Premium!\n"
            "–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞."
        )
    else:
        await callback.message.edit_text(
            "–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=inline.get_support_keyboard()
        )

def get_subscription_price(period: str) -> int:
    prices = {
        "week": 199,
        "month": 499,
        "year": 2990
    }
    return prices.get(period, config.PREMIUM_PRICE)

def get_period_name(period: str) -> str:
    names = {
        "week": "–Ω–µ–¥–µ–ª—é",
        "month": "–º–µ—Å—è—Ü",
        "year": "–≥–æ–¥"
    }
    return names.get(period, "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")

