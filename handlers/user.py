from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Voice
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards import inline
from services.content_generation import ContentGeneration
from database import db
from config import config
import logging
import io
import os
import uuid
from datetime import datetime, timedelta
from services.payment import create_payment, check_payment
from aiogram.types import FSInputFile
import speech_recognition as sr
from pydub import AudioSegment

router = Router()

class UserStates(StatesGroup):
    main_menu = State()
    chatgpt = State()
    gpt4o = State()
    imagine = State()
    premium_purchase = State()
    course = State()
    waiting_payment = State()
    support = State()
    select_neural_network = State()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    args = message.text.split(' ', maxsplit=1)[1] if len(message.text.split()) > 1 else None
    
    user = db.get_user(user_id)
    
    if args and not user['referred_by']:
        try:
            referrer_id = int(args)
            if user_id != referrer_id:
                referrer = db.get_user(referrer_id)
                if referrer and user_id not in referrer['invited_users']:
                    referrer['invited_users'].append(user_id)
                    referrer['free_generations'] += config.INVITE_BONUS
                    db.update_user(referrer_id, referrer)
                    user['referred_by'] = referrer_id
                    db.update_user(user_id, user)
                    await message.bot.send_message(
                        referrer_id,
                        f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {config.INVITE_BONUS} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π."
                    )
        except ValueError:
            logging.warning(f"Invalid referral ID: {args}")

    await show_main_menu(message, state)

async def show_main_menu(message: Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    omni_mini_reset_time = datetime.fromisoformat(user['omni_mini_reset_time']) if user['omni_mini_reset_time'] else None
    
    if omni_mini_reset_time and datetime.now() > omni_mini_reset_time:
        db.reset_omni_mini_generations(message.from_user.id)
        user = db.get_user(message.from_user.id)
        omni_mini_reset_time = datetime.fromisoformat(user['omni_mini_reset_time']) if user['omni_mini_reset_time'] else None

    reset_time_str = (omni_mini_reset_time + timedelta(hours=48)).strftime('%d.%m.%Y –≤ %H:%M') if omni_mini_reset_time else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

    await message.answer(
        "–Ø ‚Äî —Ç–≤–æ–π –≥–ª–∞–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∂–∏–∑–Ω–∏, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, "
        "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–∞–ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ –≤ —Å–æ—Ü—Å–µ—Ç–∏, "
        "–ø–æ–¥–¥–µ—Ä–∂–∏—Ç —Ç–µ–±—è, —Å–¥–µ–ª–∞–µ—Ç –∑–∞ —Ç–µ–±—è –∑–∞–¥–∞–Ω–∏–µ, –≤—ã–ø–æ–ª–Ω–∏—Ç —Ä–∞–±–æ—Ç—É –∏–ª–∏ –Ω–∞—Ä–∏—Å—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω—É.\n\n"
        f"–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ {user['free_generations']}/10 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ "
        f"(ChatGPT 4 Omni) –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (Dall-E 3 –∏ Stable Diffusion)\n\n"
        f"–¢–∞–∫–∂–µ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ {user['omni_mini_generations']}/10 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ "
        f"ChatGPT 4 mini –∫–∞–∂–¥—ã–µ 48 —á–∞—Å–æ–≤. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤: "
        f"{reset_time_str} (–º—Å–∫)\n\n"
        "‚§∑ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è —Ç–µ–±–µ –æ—Ç–≤–µ—á—É –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å "
        "‚§∑ –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –∑–∞–¥–∞–Ω–∏–µ–º ‚Äî —è —Ç–µ–±–µ –µ–≥–æ —Ä–µ—à—É "
        "‚§∑ –ù–∞–ø–∏—à—É –∑–∞ —Ç–µ–±—è –ø–æ—Å—Ç –¥–ª—è –±–ª–æ–≥–∞, —Å–æ—Ü—Å–µ—Ç–µ–π, —Å—Ñ–æ—Ä–º–∏—Ä—É—é –∑–∞—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à—É –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ —Å–æ—á–∏–Ω–µ–Ω–∏–µ "
        "‚§∑ –†–µ—à—É –ª—é–±–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—é —Ä–∞–±–æ—Ç—É –∑–∞ —Ç–µ–±—è "
        "‚§∑ –ù–∞—Ä–∏—Å—É—é –¥–ª—è —Ç–µ–±—è –∫–∞—Ä—Ç–∏–Ω—É —Å –ø–æ–º–æ—â—å—é Stable Diffusion –∏–ª–∏ DALL‚Ä¢E 3 "
        "‚§∑ –ü–æ–±—É–¥—É —Ç–≤–æ–∏–º –ª–∏—á–Ω—ã–º –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º –∏–ª–∏ –ª—É—á—à–∏–º –¥—Ä—É–≥–æ–º\n\n"
        "‚≠êÔ∏è –¢–µ–∫—É—â–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å: GPT-4 Omni\n\n"
        "üëáüèª –î–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç!",
        reply_markup=inline.get_main_menu()
    )
    await state.set_state(UserStates.main_menu)

@router.callback_query(F.data == "select_neural_network")
async def process_select_neural_network(callback: CallbackQuery, state: FSMContext):
    user = db.get_user(callback.from_user.id)
    user_data = await state.get_data()
    selected_nn = user_data.get('selected_neural_network', 'gpt4o_mini')
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n"
        f"–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ {user['free_generations']}/10 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ "
        f"(ChatGPT 4 Omni) –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (Dall-E 3 –∏ Stable Diffusion).\n"
        f"–¢–∞–∫–∂–µ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ {user['omni_mini_generations']}/10 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ "
        f"ChatGPT 4 mini –∫–∞–∂–¥—ã–µ 48 —á–∞—Å–æ–≤.",
        reply_markup=inline.get_neural_network_menu(user, selected_nn)
    )
    await state.set_state(UserStates.select_neural_network)

@router.callback_query(F.data.startswith("select_nn_"))
async def process_neural_network_selection(callback: CallbackQuery, state: FSMContext):
    selected_nn = callback.data.split("_")[2]
    user = db.get_user(callback.from_user.id)
    
    if selected_nn in ["gpt4o", "openai_o1"] and not user['premium']:
        await show_premium_offer(callback.message)
        return
    
    if selected_nn == "stable_diffusion":
        selected_nn = "dalle3"
        await callback.answer("–í—ã–±—Ä–∞–Ω Stable Diffusion, –Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω DALL-E 3")
    else:
        await callback.answer(f"–í—ã–±—Ä–∞–Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å: {selected_nn}")
    
    await state.update_data(selected_neural_network=selected_nn)
    await process_select_neural_network(callback, state)

@router.message(F.text)
async def handle_message(message: Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    data = await state.get_data()
    selected_nn = data.get('selected_neural_network', 'gpt4o_mini')
    
    if not user['premium']:
        if selected_nn == 'gpt4o_mini':
            if user['omni_mini_generations'] <= 0:
                await message.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è GPT-4 Omni Mini. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ Premium –ø–æ–¥–ø–∏—Å–∫—É.")
                return
            user['omni_mini_generations'] -= 1
        else:
            if user['free_generations'] <= 0:
                await message.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ Premium –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
                return
            user['free_generations'] -= 1
        
        db.update_user(message.from_user.id, user)
    
    response = await ContentGeneration.generate_text(message.text, model=selected_nn)
    await message.answer(response)

@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    await cmd_profile(callback.message)

@router.callback_query(F.data == "premium")
async def show_premium(callback: CallbackQuery, state: FSMContext):
    await cmd_premium(callback.message, state)

@router.callback_query(F.data == "bonus_course")
async def show_bonus_course(callback: CallbackQuery, state: FSMContext):
    await cmd_bonus(callback.message, state)

@router.callback_query(F.data == "invite_friends")
async def show_invite_friends(callback: CallbackQuery):
    await cmd_invite(callback.message)

@router.callback_query(F.data == "tech_support")
async def show_tech_support(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")
    await state.set_state(UserStates.support)

@router.message(UserStates.support)
async def handle_support_message(message: Message, state: FSMContext):
    support_message = f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}:\n\n{message.text}"
    
    for admin_id in config.ADMIN_IDS:
        try:
            await message.bot.send_message(admin_id, support_message)
        except Exception as e:
            logging.error(f"Failed to send support message to admin {admin_id}: {e}")
    
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")
    await show_main_menu(message, state)

@router.message(Command("profile"))
async def cmd_profile(message: Message):
    user = db.get_user(message.from_user.id)
    profile_text = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"üî¢ –û—Å—Ç–∞–≤—à–∏–µ—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {user['free_generations']}\n"
        f"ü§ñ –û—Å—Ç–∞–≤—à–∏–µ—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ GPT-4 Omni Mini: {user['omni_mini_generations']}\n"
        f"üåü Premium: {'–î–∞' if user['premium'] else '–ù–µ—Ç'}\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user['invited_users'])}\n"
        f"üìö –ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {len(user['completed_lessons'])}"
    )
    await message.answer(profile_text)

@router.message(Command("premium"))
async def cmd_premium(message: Message, state: FSMContext):
    await show_premium_offer(message)

async def show_premium_offer(message: Message):
    await message.answer(
        "–î–∞–Ω–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø–æ–¥–ø–∏—Å–∫–æ–π.\n\n"
        "–í –ê–º–µ—Ä–∏–∫–µ –æ–Ω–∞ —Å—Ç–æ–∏—Ç –æ–∫–æ–ª–æ 2500 —Ä—É–±–ª–µ–π, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –µ–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ —Ü–µ–Ω–µ —á–∞—à–µ—á–∫–∏ –∫–æ—Ñ–µ! "
        "–° –ø–æ–¥–ø–∏—Å–∫–æ–π —è —Å—Ç–∞–Ω—É —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –≤ 10 (!) —Ä–∞–∑ ‚Äî –º–∞–ª–∞—è —á–∞—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ, –µ—Å–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –µ–µ:\n"
        "‚≠êÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ç–∞–∫–æ–≥–æ –Ω–µ—Ç –Ω–∏ —É –∫–æ–≥–æ)\n"
        "‚≠êÔ∏è –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –Ω–µ–π—Ä–æ–Ω–∫–∞–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤, –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ª—é–±—ã–µ –∑–∞–ø—Ä–æ—Å—ã, "
        "–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π ‚Äî OpenAI o1, GPT-4 Omni\n"
        "‚≠êÔ∏è –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –Ω–µ–π—Ä–æ–Ω–∫–∞–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫ - Stable Diffusion –∏ DALL‚Ä¢E 3\n"
        "‚≠êÔ∏è –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ‚Ä¶\n\n"
        "–ö—Å—Ç–∞—Ç–∏, –Ω–∞—à–∞ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å—Ç–æ–∏—Ç –≤—Å–µ–≥–æ 1 —Ä—É–±–ª—å.\n\n"
        "P.S. ‚Äî —Å –ø–æ–¥–ø–∏—Å–∫–æ–π —è —Ä–µ–∞–ª—å–Ω–æ –≥–æ—Ä–∞–∑–¥–æ –∫—Ä—É—á–µ üòé",
        reply_markup=inline.get_premium_purchase_keyboard()
    )

@router.message(Command("bonus"))
async def cmd_bonus(message: Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    completed_lessons = set(user['completed_lessons'])
    
    courses = db.get_all_lessons()
    available_courses = [
        {"number": lesson_num, "title": lesson['title']}
        for lesson_num, lesson in courses.items()
        if int(lesson_num) not in completed_lessons
    ]
    
    if not available_courses:
        await message.answer("–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏. –ù–æ–≤—ã–µ —É—Ä–æ–∫–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã.")
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:",
        reply_markup=inline.get_course_selection_keyboard(available_courses)
    )

@router.message(Command("invite"))
async def cmd_invite(message: Message):
    user_id = message.from_user.id
    bot_info = await message.bot.get_me()
    invite_link = f"https://t.me/{bot_info.username}?start={user_id}"
    await message.answer(
        f"üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ {config.INVITE_BONUS} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π!\n\n"
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {invite_link}\n\n"
        "–ö–æ–≥–¥–∞ –≤–∞—à –¥—Ä—É–≥ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å."
    )

@router.message(F.voice)
async def handle_voice(message: Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    if not user['premium']:
        if user['free_generations'] <= 0:
            await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ö—É–ø–∏—Ç–µ Premium –∏–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –±–æ–Ω—É—Å—ã.")
            return
        user['free_generations'] -= 1
        db.update_user(message.from_user.id, user)
    
    file = await message.bot.get_file(message.voice.file_id)
    voice_ogg = io.BytesIO()
    await message.bot.download_file(file.file_path, voice_ogg)
    
    voice_wav = io.BytesIO()
    voice_ogg.seek(0)
    audio = AudioSegment.from_ogg(voice_ogg)
    audio.export(voice_wav, format="wav")
    voice_wav.seek(0)
    
    recognizer = sr.Recognizer()
    with sr.AudioFile(voice_wav) as source:
        audio = recognizer.record(source)
    
    try:
        text_from_voice = recognizer.recognize_google(audio, language="ru-RU")
    except sr.UnknownValueError:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    except sr.RequestError:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    data = await state.get_data()
    selected_nn = data.get('selected_neural_network', 'gpt4o_mini')
    response = await ContentGeneration.generate_text(text_from_voice, model=selected_nn)
    await message.answer(response)

@router.message(F.photo)
async def handle_photo(message: Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    if not user['premium']:
        if user['free_generations'] <= 0:
            await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ö—É–ø–∏—Ç–µ Premium –∏–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –±–æ–Ω—É—Å—ã.")
            return
        user['free_generations'] -= 1
        db.update_user(message.from_user.id, user)
    
    file = await message.bot.get_file(message.photo[-1].file_id)
    photo_bytes = io.BytesIO()
    await message.bot.download_file(file.file_path, photo_bytes)
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è –±–∏–±–ª–∏–æ—Ç–µ–∫—É pytesseract
    
    text_from_image = "–¢–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"  # –ó–∞–≥–ª—É—à–∫–∞
    
    response = await ContentGeneration.generate_text(f"–†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {text_from_image}", model="gpt-4o")
    await message.answer(response)

@router.message(Command("support"))
async def cmd_support(message: Message, state: FSMContext):
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")
    await state.set_state(UserStates.support)

@router.message(UserStates.support)
async def handle_support_message(message: Message, state: FSMContext):
    support_message = f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}:\n\n{message.text}"
    
    for admin_id in config.ADMIN_IDS:
        try:
            await message.bot.send_message(admin_id, support_message)
        except Exception as e:
            logging.error(f"Failed to send support message to admin {admin_id}: {e}")
    
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")
    await show_main_menu(message, state)

async def check_subscription(bot, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(config.CHANNEL_ID, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

def get_subscription_price(period: str) -> int:
    prices = {
        "week": 199,
        "month": 499,
        "year": 2990
    }
    return prices.get(period, config.PREMIUM_PRICE)

def get_period_name(period: str) -> str:
    names = {
        "week": "–Ω–µ–¥–µ–ª—é",
        "month": "–º–µ—Å—è—Ü",
        "year": "–≥–æ–¥"
    }
    return names.get(period, "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")

